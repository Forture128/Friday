import itertoolsfrom .publish_handler import PublishHandlerfrom ..storage.redis_stored import RedisStoredclass ESP32Handler:    def __init__(self):        self.redis_client = RedisStored()    TOPIC_FORMAT = "%(base_name)s/%(sensor_name)s/%(report_type)s"    BASE_DEVICE_NAME = "esp32"    SENSORS = [        "dht11",        "dht22"    ]    SENSOR_REPORT_TYPES = [        {            "dht11": { "temperature", "heat", "humidity" }        },        {            "dht22": {"temperature", "heat", "humidity"}        }    ]    REPORT_TYPE_MAP = {        "temperature": float,        "heat": float,        "humidity": float,    }    # This method generate topic    def generate_topic(self, sensor_name, report_type):        return self.TOPIC_FORMAT % {            "base_name": self.BASE_DEVICE_NAME,            "sensor_name": sensor_name,            "report_type": report_type        }    # This method will get subscription base on component Friday support    def get_subscription(self):        global result_List        result = []        for sensor, sensor_type in itertools.product(self.SENSORS,                                                     self.SENSOR_REPORT_TYPES):            for type, report_values in sensor_type.items():                for report_value in report_values:                    result.append(self.generate_topic(sensor, report_value))                    result_List = list(set(result))        return result_List    def set_value_into_redis(self, topic, payload):        return self.redis_client.set_value(topic, payload)  # Call method set.    # Handle after matching topic    # Save payload into redis with key is topic.    def handle_for(self, topic, payload):         # Init class        if self.set_value_into_redis(topic, payload):            pub_handler = PublishHandler(topic)            pub_handler.run()        else:            error_string = 'Cannot save value: {} with key {} in Redis'.format(str(payload), topic)            raise Exception(error_string)        # print(redis_client.get_value(topic))