import itertoolsimport jsonfrom typing import List, Anyfrom ..forwarder_controller import ForwarderControllerfrom ..storage.stored_service import StoredServicefrom ..utils.topic_refactor import get_topic_telemetry, get_device_idfrom ..constant import REGISTRY_WORK_ROOMclass ESP32Handler:    def __init__(self):        self._list_data = None        self.stored_service = StoredService()        self._list_topic = []    TOPIC_FORMAT = "%(base_name)s/%(sensor_name)s/%(report_type)s"    REGISTRY_ID: str = REGISTRY_WORK_ROOM    BASE_DEVICE_NAME = "esp32"    SENSORS = [        "dht11",        "dht22"    ]    SENSOR_REPORT_TYPES = [        {            "dht11": {                "temperature": float,                "heat": float,                "humidity": float            }        },        {            "dht22": {                "temperature": float,                "heat": float,                "humidity": float            }        }    ]    REPORT_TYPE_MAP = {        "temperature": float,        "heat": float,        "humidity": float,    }    # This method generate topic    def generate_topic(self, sensor_name, report_type):        return self.TOPIC_FORMAT % {            "base_name": self.BASE_DEVICE_NAME,            "sensor_name": sensor_name,            "report_type": report_type        }    # This method will get subscription topic base on component Friday support    def get_subscription(self):        result = []        for sensor, sensor_type in itertools.product(self.SENSORS,                                                     self.SENSOR_REPORT_TYPES):            for type, report_values in sensor_type.items():                for report_value in report_values:                    result.append(self.generate_topic(sensor, report_value))                    self._list_topic = list(set(result))        return self._list_topic    # Save into Redis with key is topic    # Write report topic in file .txt as history to debug.    def set_value_into_database(self, key, data):        # TODO: if set value success return true will add topic into file history.txt        return self.stored_service.set_value(key, data)  # Call method set.    def get_data_dht11(self):        # default_value: lambda x: x        # draw_data = self.SENSOR_REPORT_TYPES[0]        # print(draw_data)        sensor_type = "dht11"        data: dict = {}        sensor_keys = [i for i in self._list_topic if sensor_type in i]        for key in sensor_keys:            key_type = key.split("/")[2]            data[key_type] = self.stored_service.get_value(key)        return data    def get_data_dht22(self):        pass    def get_data_module_rely(self):        pass    def get_data(self, device_type_id):        return {            "dht11": self.get_data_dht11,            "dht22": self.get_data_dht22,            "rely": self.get_data_module_rely        }.get(device_type_id, "Do not thing")    # Handle after matching topic    # Save payload into redis with key is topic.    def handle_for(self, topic, payload):        if self.set_value_into_database(topic, payload):            device_type_id = topic.split("/")[1]            print("device_type_id ===== ", device_type_id)            data = self.get_data(device_type_id)()            print("handle for", data)        else:            raise Exception("Can't save payload into DB")